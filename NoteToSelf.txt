Continue from: https://youtu.be/-Fe0zk-F4OA?t=2844

Don't get overwhelmed, you learned a lot very fast, just go through it once in 5 mins and continue the video, the fun begins!

Note: Using DI helps delegate the object lifecycle management to spring.

# Autowire annotation: Adding Autowire over a class that creates an object from another class allow us to connect the two and therefore the object to be created.
# Skipping Spring w/o Boot

# @RestController: Signifies this class will handle the page requests
# @RequestMapping("/"): Annotates which function to call when "/" is called

#CRUD: Create Read Update Delete.. Using HTTP (protocol) methods: Post, Get, Put, Delete

#PathVariable: This annotation allows whatever entered in the URL to be taken as a template literal for input into the controller.

#@GetMapping and @PostMapping: Two subsets of @RequestMapping, same URL may need two diff operations(Get and Post) hence annotating in the controller with the right annotation should be used to eliminate confusion.

#Postman: Used for API testing, you can test Post without creating a form or any frontend.

#@RequestBody annotation receives the data from the post call body.